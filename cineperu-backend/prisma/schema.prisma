generator client {
  provider      = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RolUsuario {
  ADMIN
  USUARIO
}

enum EstadoAlquiler {
  PENDIENTE
  FINALIZADO
  CANCELADO
  VENCIDO
}

enum EstadoPago {
  PENDIENTE
  EXITOSO
  CANCELADO
}

enum TipoTransaccion {
  ALQUILER
  COMPRA
}

enum EstadoPelicula {
  DISPONIBLE
  PROXIMAMENTE
  AGOTADA
  INACTIVA
}

model Usuario {
  id               String         @id @default(uuid())
  nombre           String
  apellido         String
  correo           String         @unique
  contrase√±a       String
  imagen_perfil    String?
  rol              RolUsuario     @default(USUARIO)
  fecha_creacion   DateTime       @default(now())
  activo           Boolean        @default(true) // Permite bloquear/desbloquear usuarios

  alquileres       Alquiler[]
  compras          Compra[]
  transacciones    Transaccion[]
  carritos         Carrito[]
}

model Genero {
  id          String     @id @default(uuid())
  nombre      String     @unique
  descripcion String?
  peliculas   Pelicula[] @relation("GeneroPeliculas")
}

model Pelicula {
  id               String       @id @default(uuid())
  titulo           String       @unique
  sinopsis         String
  descripcion      String?
  director         String
  genero           Genero?      @relation("GeneroPeliculas", fields: [generoId], references: [id])
  generoId         String?
  duracion_minutos Int
  cantidad         Int?
  portada_url      String
  trailer_url      String
  fecha_estreno    DateTime
  fecha_registro   DateTime      @default(now())
  precio_compra    Decimal
  precio_alquiler  Decimal
  estado           EstadoPelicula @default(DISPONIBLE)

  alquileres       Alquiler[]
  compras          Compra[]
  transacciones    Transaccion[]
  carritos         Carrito[]
}

model Alquiler {
  id             String         @id @default(uuid())
  usuario        Usuario        @relation(fields: [usuario_id], references: [id])
  usuario_id     String
  pelicula       Pelicula       @relation(fields: [pelicula_id], references: [id])
  pelicula_id    String
  fecha_inicio   DateTime       @default(now())
  fecha_fin      DateTime
  dias_alquiler  Int            @default(7)
  estado         EstadoAlquiler @default(PENDIENTE)
}

model Compra {
  id             String     @id @default(uuid())
  usuario        Usuario    @relation(fields: [usuario_id], references: [id])
  usuario_id     String
  pelicula       Pelicula   @relation(fields: [pelicula_id], references: [id])
  pelicula_id    String
  fecha_compra   DateTime   @default(now())
  cantidad       Int        @default(1)
  monto          Decimal
}


model Carrito {
  id           String   @id @default(uuid())
  usuario      Usuario  @relation(fields: [usuario_id], references: [id])
  usuario_id   String
  pelicula     Pelicula @relation(fields: [pelicula_id], references: [id])
  pelicula_id  String
  tipo         TipoTransaccion // 'COMPRA' o 'ALQUILER'
  cantidad     Int      @default(1)
  fecha_agregado DateTime @default(now())
}

model Transaccion {
  id                String          @id @default(uuid())
  usuario           Usuario         @relation(fields: [usuario_id], references: [id])
  usuario_id        String
  pelicula          Pelicula        @relation(fields: [pelicula_id], references: [id])
  pelicula_id       String
  tipo              TipoTransaccion
  monto             Decimal
  estado_pago       EstadoPago      @default(PENDIENTE)
  fecha_transaccion DateTime        @default(now())
}
